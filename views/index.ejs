<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>2Checkout Payment</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <style>
        .custom-input {
            background-color: #f1f3f5;
            border-radius: 8px;
            padding: 12px 20px;
            width: 100%;
            border: none;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            transition: box-shadow 0.3s ease;
        }
        .custom-input:focus {
            outline: none;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.3);
        }
        .input-container {
            position: relative;
            margin-bottom: 1rem;
        }
        .inline-container {
            display: flex;
            gap: 1rem;
        }
        .error-message {
            color: red;
            font-size: 0.875rem;
        }
        #cardNetworkIcon {
            position: absolute;
            right: 10px;
            top: 65%;
            transform: translateY(-50%);
            font-size: 1.5rem;
            color: #333;
            height: 24px;
            width: auto;
            display: flex;
            align-items: center;
        }
    </style>
</head>
<body class="bg-gray-100">
    <div class="container mx-auto px-4 py-12">
        <h1 class="text-center text-3xl font-bold mb-6">2Checkout Payment Form</h1>
        <div class="max-w-md mx-auto bg-white rounded-lg shadow-md p-6">
            <form action="/process-payment" method="POST" id="payment-form">
                <div id="error-container"></div>
                <div class="input-container">
                    <label for="name" class="block text-sm font-medium text-gray-700">Name on card</label>
                    <input type="text" id="name" name="name" class="custom-input" placeholder="John Doe" required minlength="2">
                    <div class="error-message" id="nameError"></div>
                </div>
                <div class="input-container">
                    <label for="email" class="block text-sm font-medium text-gray-700">Email</label>
                    <input type="email" id="email" name="email" class="custom-input" placeholder="john.doe@example.com" required>
                    <div class="error-message" id="emailError"></div>
                </div>
                <div class="input-container">
                    <label for="cardNumber" class="block text-sm font-medium text-gray-700">Card number</label>
                    <input type="text" id="cardNumber" name="cardNumber" class="custom-input" placeholder="1234 5678 9012 3456" required maxlength="19" oninput="formatCardNumber(this); checkCardNetwork(this);">
                    <i id="cardNetworkIcon"></i>
                    <div class="error-message" id="cardNumberError"></div>
                </div>       
                <div class="inline-container">
                    <div class="input-container">
                        <label for="expMonth" class="block text-sm font-medium text-gray-700">Expiry Month</label>
                        <input type="text" id="expMonth" name="expMonth" class="custom-input" placeholder="MM" required maxlength="2" oninput="formatExpiryMonth(this);">
                        <div class="error-message" id="expMonthError"></div>
                    </div>
                    <div class="input-container">
                        <label for="expYear" class="block text-sm font-medium text-gray-700">Expiry Year</label>
                        <input type="text" id="expYear" name="expYear" class="custom-input" placeholder="YY" required maxlength="2" oninput="formatExpiryYear(this);">
                        <div class="error-message" id="expYearError"></div>
                    </div>
                    <div class="input-container">
                        <label for="cvv" class="block text-sm font-medium text-gray-700">CVC</label>
                        <input type="text" id="cvv" name="cvv" class="custom-input" placeholder="123" required maxlength="4" oninput="formatCVV(this);">
                        <div class="error-message" id="cvvError"></div>
                    </div>
                </div>
                <div class="input-container">
                    <label for="amount" class="block text-sm font-medium text-gray-700">Amount</label>
                    <input type="number" id="amount" name="amount" class="custom-input" placeholder="Amount" required min="0.01" step="0.01">
                    <div class="error-message" id="amountError"></div>
                </div>
                <button type="submit" class="w-full bg-indigo-600 text-white py-2 px-4 rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">Pay Now</button>
            </form>
        </div>
    </div>
    <script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
    <script>
        function checkCardNetwork(input) {
            const cardNumber = $(input).val();
            let network = '';
            let iconClass = '';
    
            if (/^4/.test(cardNumber)) {
                network = 'visa';
                iconClass = 'fab fa-cc-visa';
            } else if (/^5[1-5]/.test(cardNumber)) {
                network = 'mastercard';
                iconClass = 'fab fa-cc-mastercard';
            } else if (/^3[47]/.test(cardNumber)) {
                network = 'amex';
                iconClass = 'fab fa-cc-amex';
            } else if (/^6(?:011|5)/.test(cardNumber)) {
                network = 'discover';
                iconClass = 'fab fa-cc-discover';
            } else if (/^35/.test(cardNumber)) {
                network = 'jcb';
                iconClass = 'fab fa-cc-jcb';
            }
    
            $('#cardNetworkIcon').attr('class', iconClass);
        }
    
        $('#payment-form').on('input', function (event) {
            validateField(event.target);
        });
    
        function validateField(field) {
            let isValid = true;
            let errorMessage = '';
    
            switch (field.name) {
                case 'name':
                    if (!$(field).val().trim()) {
                        isValid = false;
                        errorMessage = 'Name is required.';
                    }
                    break;
                case 'email':
                    if (!validateEmail($(field).val())) {
                        isValid = false;
                        errorMessage = 'Valid email is required.';
                    }
                    break;
                case 'cardNumber':
                    if (!validateCardNumber($(field).val())) {
                        isValid = false;
                        errorMessage = 'Valid card number is required.';
                    }
                    break;
                case 'expMonth':
                    if (!validateExpMonth($(field).val())) {
                        isValid = false;
                        errorMessage = 'Valid expiration month is required (01-12).';
                    }
                    break;
                case 'expYear':
                    if (!validateExpYear($(field).val())) {
                        isValid = false;
                        errorMessage = 'Valid expiration year is required.';
                    }
                    break;
                case 'cvv':
                    if (!validateCVV($(field).val())) {
                        isValid = false;
                        errorMessage = 'Valid CVV is required (3-4 digits).';
                    }
                    break;
                case 'amount':
                    if (!$(field).val() || isNaN($(field).val()) || parseFloat($(field).val()) <= 0) {
                        isValid = false;
                        errorMessage = 'Amount must be greater than zero.';
                    }
                    break;
                default:
                    break;
            }
    
            displayError(field.name, errorMessage);
            return isValid;
        }
    
        function displayError(fieldName, message) {
            $('#' + fieldName + 'Error').text(message);
        }
    
        function validateEmail(email) {
            const re = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
            return re.test(String(email).toLowerCase());
        }
    
        function formatCardNumber(input) {
            let value = $(input).val().replace(/\D/g, '');
            const maxLength = /^3[47]/.test(value) ? 15 : 16;
            value = value.slice(0, maxLength);
            const formattedValue = value.replace(/(\d{4})(?=\d)/g, '$1 ');
            $(input).val(formattedValue.trim()).attr('data-raw-value', value);
    
            if (value.length === maxLength) {
                autoTabToNext(input);
            }
        }
    
        function autoTabToNext(input) {
            const formElements = $(input).closest('form').find(':input');
            const index = formElements.index(input);
            if (index > -1 && index < formElements.length - 1) {
                formElements.eq(index + 1).focus();
            }
        }
    
        function formatExpiryMonth(input) {
            let value = $(input).val().replace(/\D/g, '');
            $(input).val(value.slice(0, 2));
            if (value.length === 2 && validateExpMonth(value)) {
                autoTabToNext(input);
            }
        }
    
        function formatExpiryYear(input) {
            let value = $(input).val().replace(/\D/g, '');
            $(input).val(value.slice(0, 2));
            if (value.length === 2 && validateExpYear(value)) {
                autoTabToNext(input);
            }
        }
    
        function formatCVV(input) {
            let value = $(input).val().replace(/\D/g, '');
            $(input).val(value.slice(0, 4));
            if ((value.length === 3 || value.length === 4) && validateCVV(value)) {
                autoTabToNext(input);
            }
        }
    
        function validateCardNumber(value) {
            if (!value) {
                console.error("Card number value is undefined or empty.");
                return false;
            }
    
            value = value.replace(/\D/g, '');
            const re = /^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|3[47][0-9]{13}|6(?:011|5[0-9]{2})[0-9]{12}|35[0-9]{14})$/;
            return re.test(value);
        }
    
        function validateExpMonth(expMonth) {
            const month = parseInt(expMonth, 10);
            return !isNaN(month) && month >= 1 && month <= 12;
        }
    
        function validateExpYear(expYear) {
            const year = parseInt(expYear, 10);
            const currentYear = new Date().getFullYear() % 100;
            return !isNaN(year) && year >= currentYear && year <= 99;
        }
    
        function validateCVV(cvv) {
            const re = /^\d{3,4}$/;
            return re.test(cvv);
        }
    </script>
</body>
</html>